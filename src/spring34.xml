<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">

	<bean id="triangle" class="edu.deepak._34_AopXmlConfiguration.Model.Triangle">
		<!-- <property name="name" value="Right Angle Triangle" /> -->
	</bean>

	<bean id="circle" class="edu.deepak._34_AopXmlConfiguration.Model.Circle">
		<property name="name" value="Dummy Name" />
	</bean>

	<bean id="shapeService" class="edu.deepak._34_AopXmlConfiguration.Service.ShapeService"
		autowire="byName" />

	<bean name="loggingAspect"
		class="edu.deepak._34_AopXmlConfiguration.Aspect.LoggingAspect" />

	<aop:config>
		<aop:aspect id="loggingAspect" ref="loggingAspect">
<!-- 			<aop:pointcut id="allGetters" expression="execution(* get*())" /> -->
<!-- 			<aop:around pointcut-ref="allGetters" method="myAroundAdviceWithReturnType" /> -->

			<!-- We can also define pointcut expression itself in aop:around and avoid 
				using aop:pointcut -->
			<aop:around pointcut="execution(* get*())" method="myAroundAdviceWithReturnType" />

		</aop:aspect>

	</aop:config>

	<aop:aspectj-autoproxy />
</beans>